name: Deploy

on:
  push:
    branches:
      - main

jobs:
  production:
    environment: production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [14.x]
    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Set a job-wide environment variables
        run: |
          echo "APP_REVISION=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "GITHUB_JOB_NAME=production" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "NODE_VERSION=${{ matrix.node_version }}" >> $GITHUB_ENV
      - name: Set up Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
      - name: Install
        run: yarn install --ignore-scripts
      - name: Build
        id: build
        run: |
          # build
          yarn build
          export STATUS="$?"

          # status
          if [ "${STATUS}" -eq 0 ]; then
            exit 0
          else
            exit 1
          fi
        env:
          APP_PUBLIC_PATH: /react-ui-icheck/
      - name: Add Docker certificates to access the remote host
        run: |
          mkdir -p "${DOCKER_CERT_PATH}"
          echo "${DOCKER_TLS_CA}" > "${DOCKER_CERT_PATH}/ca.pem"
          echo "${DOCKER_TLS_CERT}" > "${DOCKER_CERT_PATH}/cert.pem"
          echo "${DOCKER_TLS_KEY}" > "${DOCKER_CERT_PATH}/key.pem"
          chmod 400 "${DOCKER_CERT_PATH}/ca.pem"
          chmod 400 "${DOCKER_CERT_PATH}/cert.pem"
          chmod 400 "${DOCKER_CERT_PATH}/key.pem"
        env:
          DOCKER_CERT_PATH: /home/runner/.docker/deploy
          DOCKER_TLS_CA: ${{ secrets.DOCKER_TLS_CA }}
          DOCKER_TLS_CERT: ${{ secrets.DOCKER_TLS_CERT }}
          DOCKER_TLS_KEY: ${{ secrets.DOCKER_TLS_KEY }}
      - name: Build Docker image
        run: |
          docker build --tag "${DOCKER_IMAGE}:${DOCKER_IMAGE_TAG}" .
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_TAG=${DOCKER_IMAGE_TAG}" >> $GITHUB_ENV
        env:
          # docker
          DOCKER_CERT_PATH: /home/runner/.docker/deploy
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          DOCKER_TLS_VERIFY: 1
          # docker stack
          DOCKER_IMAGE: victorpopkov/react-ui-icheck-website
          DOCKER_IMAGE_TAG: latest
      - name: Deploy Docker Stack
        run: |
          docker stack rm "${DOCKER_STACK_NAME}"
          docker stack deploy \
            --with-registry-auth \
            --resolve-image=always \
            --compose-file=docker-stack.yml \
            --prune \
            "${DOCKER_STACK_NAME}"
        env:
          # docker
          DOCKER_CERT_PATH: /home/runner/.docker/deploy
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          DOCKER_TLS_VERIFY: 1
          # docker stack
          DOCKER_STACK_NAME: github_react_ui_icheck_website
          DOCKER_STACK_NODE_HOSTNAME: mercury
          # loki
          LOKI_PIPELINE_STAGE_FILE: /etc/loki/pipelines/nginx.yml
          LOKI_URL: ${{ secrets.LOKI_URL }}
          # nginx
          NGINX_CONF: /etc/nginx/nginx.conf
          # traefik
          TRAEFIK_HOSTNAME: github.victorpopkov.com
          TRAEFIK_NAME: github-react-ui-icheck-website
          # app
          APP_PUBLIC_PATH: /react-ui-icheck/
      - name: Prepare success Slack notification
        if: success()
        run: echo "SLACK_CUSTOM_PAYLOAD=${SLACK_CUSTOM_PAYLOAD}" >> $GITHUB_ENV
        env:
          SLACK_CUSTOM_PAYLOAD: '{"channel":"${{ secrets.SLACK_CHANNEL }}","attachments":[{"color":"#2eb886","fallback":"GitHub Actions {{ GITHUB_WORKFLOW }} workflow {{ GITHUB_JOB_NAME }} job of {{ GITHUB_REPOSITORY }}@{{ BRANCH_NAME }} by {{ GITHUB_ACTOR }} has passed on Node.js {{ NODE_VERSION }}","blocks":[{"type":"section","text":{"type":"mrkdwn","text":"GitHub Actions *<https://github.com/{{ GITHUB_REPOSITORY }}/actions/runs/{{ GITHUB_RUN_ID }}|{{ GITHUB_WORKFLOW }}>* workflow *{{ GITHUB_JOB_NAME }}* job of *<https://github.com/{{ GITHUB_REPOSITORY }}|{{ GITHUB_REPOSITORY }}>@<https://github.com/{{ GITHUB_REPOSITORY }}/tree/{{ BRANCH_NAME }}|{{ BRANCH_NAME }}>* by *{{ GITHUB_ACTOR }}* has passed on Node.js *{{ NODE_VERSION }}*"}}]}]}'
      - name: Prepare failure Slack notification
        if: failure()
        run: echo "SLACK_CUSTOM_PAYLOAD=${SLACK_CUSTOM_PAYLOAD}" >> $GITHUB_ENV
        env:
          SLACK_CUSTOM_PAYLOAD: '{"channel":"${{ secrets.SLACK_CHANNEL }}","attachments":[{"color":"#ed2f00","fallback":"GitHub Actions {{ GITHUB_WORKFLOW }} workflow {{ GITHUB_JOB_NAME }} job of {{ GITHUB_REPOSITORY }}@{{ BRANCH_NAME }} by {{ GITHUB_ACTOR }} has failed on Node.js {{ NODE_VERSION }}","blocks":[{"type":"section","text":{"type":"mrkdwn","text":"GitHub Actions *<https://github.com/{{ GITHUB_REPOSITORY }}/actions/runs/{{ GITHUB_RUN_ID }}|{{ GITHUB_WORKFLOW }}>* workflow *{{ GITHUB_JOB_NAME }}* job of *<https://github.com/{{ GITHUB_REPOSITORY }}|{{ GITHUB_REPOSITORY }}>@<https://github.com/{{ GITHUB_REPOSITORY }}/tree/{{ BRANCH_NAME }}|{{ BRANCH_NAME }}>* by *{{ GITHUB_ACTOR }}* has failed on Node.js *{{ NODE_VERSION }}*"}}]}]}'
      - name: Send Slack notification
        if: ${{ !env.ACT && always() }}
        uses: Ilshidur/action-slack@2.1.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
